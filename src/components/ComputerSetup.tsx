/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useLayoutEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useLoader } from "@react-three/fiber";
import useTextureLoad from "@/hooks/useTextureLoad";
import useTexturesLoad from "@/hooks/useTexturesLoad";

type GLTFResult = GLTF & {
  nodes: {
    steamdeck: THREE.Mesh;
    hdmi_male1: THREE.Mesh;
    hdmi_cable: THREE.Mesh;
    hdmi_male2: THREE.Mesh;
    monitorstand: THREE.Mesh;
    monitor: THREE.Mesh;
    keyboard: THREE.Mesh;
    keys: THREE.Mesh;
    table: THREE.Mesh;
    table002: THREE.Mesh;
    Logitech_Mouse: THREE.Mesh;
    Logitech_Mouse_scrollwheel: THREE.Mesh;
    Cube089: THREE.Mesh;
    Cube082: THREE.Mesh;
    Curve: THREE.Mesh;
    Curve003: THREE.Mesh;
    Cylinder: THREE.Mesh;
    Cylinder016: THREE.Mesh;
    HDMI: THREE.Mesh;
    HDMI001: THREE.Mesh;
    HDMI002: THREE.Mesh;
    Text003: THREE.Mesh;
    ["TYPE-C"]: THREE.Mesh;
    ["TYPE-C001"]: THREE.Mesh;
    USB: THREE.Mesh;
    USB002: THREE.Mesh;
    USB003: THREE.Mesh;
    usb_icon: THREE.Mesh;
    Cube015: THREE.Mesh;
    Cube017: THREE.Mesh;
    Cube018: THREE.Mesh;
    Cube019: THREE.Mesh;
    Cube020: THREE.Mesh;
    Cube021: THREE.Mesh;
    Cube022: THREE.Mesh;
    Cube023: THREE.Mesh;
    Cube024: THREE.Mesh;
    Cube025: THREE.Mesh;
    Cube026: THREE.Mesh;
    Cube027: THREE.Mesh;
    Cube016: THREE.Mesh;
    Cube084: THREE.Mesh;
    Text005: THREE.Mesh;
    Leaves: THREE.Mesh;
    Leaves2: THREE.Mesh;
    Leaves3: THREE.Mesh;
    plastic_pot: THREE.Mesh;
    Pot003: THREE.Mesh;
    Soil003: THREE.Mesh;
    Circle019: THREE.Mesh;
  };
  materials: {};
};

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "assets/models/computersetup_nomat.glb"
  ) as GLTFResult;

  const tableLegColorMap = useTextureLoad("/images/table_leg_4K_color.jpg");
  const chairBottomColorMap = useTextureLoad(
    "/images/baked_gaming_chair_bottom_4K_color.jpg"
  );
  const keycapsColorMap = useTextureLoad(
    "images/mechanical_keycaps_4K_color.jpg"
  );
  const keyboardFrameColorMap = useTextureLoad(
    "images/keyboard_frame color.png"
  );
  const trackpadColorMap = useTextureLoad(
    "images/laptop_trackpad_4K_color.jpg"
  );
  const laptopBodyColorMap = useTextureLoad("images/laptop_body_4K_color.jpg");
  const [plantColorMap, plantNormalMap, plantSpecMap] = useTexturesLoad(
    [
      "images/Monstera_1_dif.jpg",
      "images/Monstera_1_norm.jpg",
      "images/Monstera_1_spec000.jpg",
    ],
    [THREE.SRGBColorSpace, THREE.NoColorSpace, THREE.NoColorSpace]
  );

  const headphoneColorMap = useTextureLoad("images/headphone_4K_color.jpg");

  const [headphoneRoughnessMap, headphoneSpecularMap] = useTexturesLoad(
    ["images/headphone_4K_roughness.jpg", "images/headphone_4K_specular.jpg"],
    [THREE.NoColorSpace, THREE.NoColorSpace]
  );

  const logitechMouseColorMap = useTextureLoad(
    "images/logitech_mouse_4K_color.jpg"
  );

  const steamdeckColorMap = useTextureLoad("images/steamdeck_4K_color.jpg");
  const [steamdeckRoughnessMap, steamdeckSpecularMap] = useTexturesLoad(
    ["images/steamdeck_4K_roughness.jpg", "images/steamdeck_4K_specular.jpg"],
    [THREE.NoColorSpace, THREE.NoColorSpace]
  );
  const typecHubColorMap = useTextureLoad("images/type_c_hub_4K_diffuse.jpg");
  const [typecHubRoughnessMap, typecHubMetallicMap] = useTexturesLoad(
    ["images/Type_C_Hub_roughness.jpg", "images/Type_C_Hub_metallic.jpg"],
    [THREE.NoColorSpace, THREE.NoColorSpace]
  );

  const laptopBodyHolesColorMap = useTextureLoad(
    "images/laptop_body_holes_diffuse.jpg"
  );

  const laptopScreenGlassColorMap = useTextureLoad(
    "images/laptop_glass_screen_4K_color.jpg"
  );
  const laptopCaseScreenColorMap = useTextureLoad(
    "images/laptop_screen_case_4K_color.png"
  );
  const [
    laptopCaseScreenMetallicMap,
    laptopCaseScreenRoughness,
    laptopCaseScreenSpecular,
  ] = useTexturesLoad(
    [
      "images/laptop_screen_case_4K_metallic.jpg",
      "images/laptop_screen_case_4K_roughness.jpg",
      "images/laptop_screen_case_4K_specular.jpg",
    ],
    [THREE.NoColorSpace, THREE.NoColorSpace, THREE.NoColorSpace]
  );

  const laptopkeysColorMap = useTextureLoad("images/laptop_keys_4K_color.png");

  const [laptopkeysMetallicMap, laptopkeysRoughnessMap, laptopkeysSpecularMap] =
    useTexturesLoad(
      [
        "images/laptop_keys_4K_metallic.jpg",
        "images/laptop_keys_4K_roughness.jpg",
        "images/laptop_keys_4K_specular.jpg",
      ],
      [THREE.NoColorSpace, THREE.NoColorSpace, THREE.NoColorSpace]
    );

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.steamdeck.geometry}
        material={
          new THREE.MeshPhysicalMaterial({
            map: steamdeckColorMap,
            roughnessMap: steamdeckRoughnessMap,
            specularColorMap: steamdeckSpecularMap,
          })
        }
        position={[-0.001, 0.088, -0.028]}
        rotation={[0, 0.185, 0]}
        scale={0.001}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.hdmi_male1.geometry}
        material={
          new THREE.MeshPhysicalMaterial({
            color: 0xff121212,
            roughness: 0.5,
            specularIntensity: 0.5,
          })
        }
        position={[0.321, 0.071, -0.124]}
        rotation={[0, -0.194, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.hdmi_cable.geometry}
        material={
          new THREE.MeshPhysicalMaterial({
            color: 0xff121212,
            roughness: 0.5,
            specularIntensity: 0.5,
          })
        }
        position={[0.3, 0.071, -0.128]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.hdmi_male2.geometry}
        material={
          new THREE.MeshPhysicalMaterial({
            color: 0xff121212,
            roughness: 0.5,
            specularIntensity: 0.5,
          })
        }
        position={[0.026, 0.294, -0.048]}
        rotation={[-1.847, -1.543, -1.88]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.monitorstand.geometry}
        material={
          new THREE.MeshPhysicalMaterial({
            color: 0xff121212,
            roughness: 0.7,
            specularIntensity: 0.5,
          })
        }
        position={[0, 0.278, -0.175]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.monitor.geometry}
        material={
          new THREE.MeshPhysicalMaterial({
            color: 0xff121212,
            roughness: 0.7,
            specularIntensity: 0.5,
          })
        }
        position={[0, 0.359, -0.016]}
      />
      <group position={[0.002, 0.064, 0.21]} scale={0.175}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.keyboard.geometry}
          material={
            new THREE.MeshPhysicalMaterial({
              map: keyboardFrameColorMap,
              roughness: 0.25,
              specularIntensity: 0.7,
              metalness: 1.0,
            })
          }
          position={[-0.013, 0.108, 0.019]}
          scale={5.705}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.keys.geometry}
          material={
            new THREE.MeshPhysicalMaterial({
              map: keycapsColorMap,
              roughness: 0.7,
            })
          }
          position={[0, 0.212, 0]}
          scale={0.038}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.table.geometry}
        material={
          new THREE.MeshPhysicalMaterial({
            map: tableLegColorMap,
            roughness: 0.5,
            metalness: 1.0,
          })
        }
        position={[-0.098, 0.045, 0.098]}
        scale={[0.874, 1, 1]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.table002.geometry}
        material={
          new THREE.MeshPhysicalMaterial({
            color: 0xffe78b5e,
            specularIntensity: 0.25,
            roughness: 0.75,
          })
        }
        position={[-0.098, 0.045, 0.098]}
        scale={[0.874, 1, 1]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Logitech_Mouse.geometry}
        material={
          new THREE.MeshPhysicalMaterial({
            map: logitechMouseColorMap,
            specularIntensity: 0.5,
            roughness: 0.7,
          })
        }
        position={[0.242, 0.072, 0.202]}
        scale={[-0.024, -0.037, -0.037]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Logitech_Mouse_scrollwheel.geometry}
        material={
          new THREE.MeshPhysicalMaterial({
            color: 0xff262626,
            specularIntensity: 0.5,
            roughness: 0.6,
          })
        }
        position={[0.243, 0.078, 0.176]}
        scale={[-0.024, -0.037, -0.037]}
      />
      <group
        position={[0.004, -0.786, 0.647]}
        rotation={[-Math.PI, 0.079, -Math.PI]}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube089.geometry}
          material={
            new THREE.MeshPhysicalMaterial({
              map: chairBottomColorMap,
              roughness: 0.7,
            })
          }
          position={[-0.005, 0.077, 0.016]}
          rotation={[0, -0.343, 0]}
          scale={[0.061, 0.034, 0.061]}
        />
      </group>
      <group
        position={[0.345, 0.064, -0.116]}
        rotation={[Math.PI, -1.377, Math.PI]}
        scale={0.037}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube082.geometry}
          material={
            new THREE.MeshPhysicalMaterial({
              map: typecHubColorMap,
              roughnessMap: typecHubRoughnessMap,
              metalnessMap: typecHubMetallicMap,
            })
          }
          scale={27.247}
        >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Curve.geometry}
            material={
              new THREE.MeshPhysicalMaterial({
                color: 0xffffffff,
                metalness: 0.909091,
                specularIntensity: 0.5,
                roughness: 0.304545,
                sheen: 0.5,
                clearcoatRoughness: 0.03,
              })
            }
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Curve003.geometry}
            material={
              new THREE.MeshPhysicalMaterial({
                color: 0xffffffff,
                metalness: 0.909091,
                specularIntensity: 0.5,
                roughness: 0.304545,
                sheen: 0.5,
                clearcoatRoughness: 0.03,
              })
            }
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cylinder.geometry}
            material={nodes.Cylinder.material}
            position={[0, 0, -0.002]}
            rotation={[0.149, -0.023, -0.545]}
          >
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.Cylinder016.geometry}
              material={nodes.Cylinder016.material}
            />
          </mesh>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.HDMI.geometry}
            material={
              new THREE.MeshPhysicalMaterial({
                color: 0xff121212,
                roughness: 0.5,
                specularIntensity: 0.5,
              })
            }
          >
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.HDMI001.geometry}
              material={
                new THREE.MeshPhysicalMaterial({
                  color: 0xff121212,
                  roughness: 0.5,
                  specularIntensity: 0.5,
                })
              }
            >
              <mesh
                castShadow
                receiveShadow
                geometry={nodes.HDMI002.geometry}
                material={
                  new THREE.MeshPhysicalMaterial({
                    color: 0xff121212,
                    roughness: 0.5,
                    specularIntensity: 0.5,
                  })
                }
              />
            </mesh>
          </mesh>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Text003.geometry}
            material={nodes.Text003.material}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes["TYPE-C"].geometry}
            material={nodes["TYPE-C"].material}
          >
            <mesh
              castShadow
              receiveShadow
              geometry={nodes["TYPE-C001"].geometry}
              material={nodes["TYPE-C001"].material}
            />
          </mesh>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.USB.geometry}
            material={
              new THREE.MeshPhysicalMaterial({
                color: 0xff8a8a8a,
                metalness: 1.0,
                specularIntensity: 0.291,
                roughness: 0.291,
                clearcoat: 1.0,
                clearcoatRoughness: 0.105,
              })
            }
          >
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.USB002.geometry}
              material={
                new THREE.MeshPhysicalMaterial({
                  color: 0xff246eb8,
                  specularIntensity: 0.5,
                })
              }
            >
              <mesh
                castShadow
                receiveShadow
                geometry={nodes.USB003.geometry}
                material={nodes.USB003.material}
              />
            </mesh>
          </mesh>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.usb_icon.geometry}
            material={
              new THREE.MeshPhysicalMaterial({
                color: 0xffffffff,
                metalness: 0.909091,
                specularIntensity: 0.5,
                roughness: 0.304545,
                sheen: 0.5,
                clearcoatRoughness: 0.03,
              })
            }
          />
        </mesh>
      </group>
      <group
        position={[0.571, 0.064, 0.184]}
        rotation={[0, -Math.PI / 4, 0]}
        scale={0.52}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube015.geometry}
          material={
            new THREE.MeshPhysicalMaterial({
              map: laptopBodyColorMap,
              metalness: 1.0,
            })
          }
          position={[0, 0.017, -0.003]}
          rotation={[-0.016, 0, 0]}
          scale={0.274}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube017.geometry}
          material={
            new THREE.MeshPhysicalMaterial({
              map: trackpadColorMap,
              metalness: 1.0,
            })
          }
          position={[0, 0.017, -0.003]}
          rotation={[-0.016, 0, 0]}
          scale={0.274}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube017.geometry}
          material={
            new THREE.MeshPhysicalMaterial({
              map: trackpadColorMap,
              metalness: 1.0,
            })
          }
          position={[0, 0.017, -0.003]}
          rotation={[-0.016, 0, 0]}
          scale={0.274}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube017.geometry}
          material={
            new THREE.MeshPhysicalMaterial({
              map: trackpadColorMap,
              metalness: 1.0,
            })
          }
          position={[0, 0.025, 0.149]}
          rotation={[0.001, 0, 0]}
          scale={0.121}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube018.geometry}
          material={
            new THREE.MeshPhysicalMaterial({
              map: laptopkeysColorMap,
              metalnessMap: laptopkeysMetallicMap,
              roughnessMap: laptopkeysRoughnessMap,
              specularColorMap: laptopkeysSpecularMap,
            })
          }
          position={[0.006, 0.027, -0.093]}
          scale={0.259}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube019.geometry}
          material={nodes.Cube019.material}
          position={[-0.393, 0.019, -0.222]}
          rotation={[0.001, 0, 0]}
          scale={[0.006, 0.004, 0.008]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube020.geometry}
          material={nodes.Cube020.material}
          position={[-0.392, 0.02, -0.227]}
          rotation={[0.001, 0, 0]}
          scale={[0.006, 0.003, 0.001]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube021.geometry}
          material={nodes.Cube021.material}
          position={[-0.392, 0.018, -0.227]}
          rotation={[0.001, 0, 0]}
          scale={[0.006, 0.003, 0.001]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube022.geometry}
          material={nodes.Cube022.material}
          position={[-0.393, 0.019, -0.183]}
          rotation={[0.001, 0, 0]}
          scale={[0.006, 0.004, 0.008]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube023.geometry}
          material={nodes.Cube023.material}
          position={[-0.392, 0.02, -0.188]}
          rotation={[0.001, 0, 0]}
          scale={[0.006, 0.003, 0.001]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube024.geometry}
          material={nodes.Cube024.material}
          position={[-0.392, 0.018, -0.188]}
          rotation={[0.001, 0, 0]}
          scale={[0.006, 0.003, 0.001]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube025.geometry}
          material={
            new THREE.MeshPhysicalMaterial({
              color: 0xff000000,
              metalness: 1.0,
              specularIntensity: 0.866667,
              roughness: 0.6625,
            })
          }
          position={[0.14, 0.027, -0.167]}
          scale={0.259}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube026.geometry}
          material={
            new THREE.MeshPhysicalMaterial({
              map: laptopBodyHolesColorMap,
              metalness: 1.0,
              specularIntensity: 1.0,
              roughness: 0.364423,
              sheen: 0.5,
              clearcoatRoughness: 0.03,
              toneMapped: false,
              flatShading: true,
            })
          }
          position={[-0.4, 0.025, -0.213]}
          scale={[0.001, 0, 0.001]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube027.geometry}
          material={
            new THREE.MeshPhysicalMaterial({
              map: laptopBodyHolesColorMap,
              metalness: 1.0,
              specularIntensity: 1.0,
              roughness: 0.364423,
              sheen: 0.5,
              clearcoatRoughness: 0.03,
              toneMapped: false,
              flatShading: true,
            })
          }
          position={[0.321, 0.025, -0.213]}
          scale={[0.001, 0, 0.001]}
        />
        <group
          position={[0.001, 0.022, -0.276]}
          rotation={[-0.352, 0, 0]}
          scale={0.259}
        >
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube016.geometry}
            material={
              new THREE.MeshPhysicalMaterial({
                map: laptopCaseScreenColorMap,
                roughnessMap: laptopCaseScreenRoughness,
                specularColorMap: laptopCaseScreenSpecular,
                metalnessMap: laptopCaseScreenMetallicMap,
              })
            }
            position={[0.001, -0.015, -0.014]}
            rotation={[1.572, 0, 0]}
            scale={1.06}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube084.geometry}
            material={
              new THREE.MeshPhysicalMaterial({
                map: laptopScreenGlassColorMap,
                metalness: 0,
                roughness: 0,
                specularIntensity: 0.5,
                transparent: true,
                opacity: 0.3,
                transmission: 1.0,
                thickness: 1,
                clearcoatRoughness: 0.03,
                sheen: 0.5,
              })
            }
            position={[0.001, -0.015, -0.014]}
            rotation={[1.572, 0, 0]}
            scale={1.06}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Text005.geometry}
            material={nodes.Text005.material}
            position={[0.01, 0.101, -0.014]}
            rotation={[1.571, 0, 0]}
            scale={[0.044, 0.045, 0.049]}
          />
        </group>
      </group>
      <group
        position={[-0.795, 0.064, -0.109]}
        rotation={[Math.PI, 0, Math.PI]}
        scale={0.196}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Leaves.geometry}
          material={
            new THREE.MeshPhysicalMaterial({
              map: plantColorMap,
              normalMap: plantNormalMap,
              specularColorMap: plantSpecMap,
            })
          }
          position={[0.398, 1.675, -0.323]}
          rotation={[-0.103, 1.154, 0.127]}
          scale={5.091}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Leaves2.geometry}
          material={
            new THREE.MeshPhysicalMaterial({
              map: plantColorMap,
              normalMap: plantNormalMap,
              specularColorMap: plantSpecMap,
            })
          }
          position={[-0.331, 1.669, -0.478]}
          rotation={[0, 1.144, 0]}
          scale={5.091}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Leaves3.geometry}
          material={
            new THREE.MeshPhysicalMaterial({
              map: plantColorMap,
              normalMap: plantNormalMap,
              specularColorMap: plantSpecMap,
            })
          }
          position={[0.023, 1.71, 0.494]}
          rotation={[-0.212, 1.16, 0.259]}
          scale={5.091}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.plastic_pot.geometry}
          material={
            new THREE.MeshPhysicalMaterial({
              color: 0xff121212,
            })
          }
          position={[0, 0.549, 0]}
          scale={5.091}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Pot003.geometry}
          material={
            new THREE.MeshPhysicalMaterial({
              color: 0xff565656,
            })
          }
          position={[0, 0.328, 0]}
          scale={5.091}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Soil003.geometry}
          material={nodes.Soil003.material}
          position={[0.001, 0.649, 0.001]}
          scale={[0.323, 0.727, 0.323]}
        />
      </group>
      <group
        position={[-0.442, 0.064, 0.177]}
        rotation={[-Math.PI, 0.148, -Math.PI]}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Circle019.geometry}
          material={
            new THREE.MeshPhysicalMaterial({
              map: headphoneColorMap,
              roughnessMap: headphoneRoughnessMap,
              specularColorMap: headphoneSpecularMap,
            })
          }
          position={[-0.073, 0.051, -0.002]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("assets/models/computersetup_nomat.glb");
